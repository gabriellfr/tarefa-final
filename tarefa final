#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
    char proprietario[100];
    char combustivel[20];
    char modelo[50];
    char cor[20];
    char chassi[20];
    int ano;
    char placa[8];
} Veiculo;


typedef struct Node {
    Veiculo veiculo;
    struct Node *prox;
} Node;


Node *inicializarLista() {
    return NULL;
}


Node *adicionarVeiculo(Node *lista, Veiculo novoVeiculo) {
    Node *novoNode = (Node *)malloc(sizeof(Node));
    novoNode->veiculo = novoVeiculo;
    novoNode->prox = lista;

    return novoNode;
}


void listarProprietariosDiesel2010(Node *lista) {
    printf("\nProprietarios de carros do ano de 2010 ou posterior movidos a diesel:\n");
    Node *atual = lista;
    while (atual != NULL) {
        if (atual->veiculo.ano >= 2010 && strcmp(atual->veiculo.combustivel, "diesel") == 0) {
            printf("%s\n", atual->veiculo.proprietario);
        }
        atual = atual->prox;
    }
}


void listarPlacasJ(Node *lista) {
    printf("\nPlacas que começam com 'J' e terminam com 0, 2, 4 ou 7, com seus proprietarios:\n");
    Node *atual = lista;
    while (atual != NULL) {
        if (atual->veiculo.placa[0] == 'J' &&
            (atual->veiculo.placa[7] == '0' || atual->veiculo.placa[7] == '2' ||
             atual->veiculo.placa[7] == '4' || atual->veiculo.placa[7] == '7')) {
            printf("%s - %s\n", atual->veiculo.placa, atual->veiculo.proprietario);
        }
        atual = atual->prox;
    }
}


void listarModeloCorVogal(Node *lista) {
    printf("\nModelo e cor de veiculos com placas com segunda letra vogal e soma de valores numericos par:\n");
    Node *atual = lista;
    while (atual != NULL) {
        char segundaLetraPlaca = atual->veiculo.placa[1];
        int somaNumerosPlaca = atoi(atual->veiculo.placa + 3);

        if ((segundaLetraPlaca == 'A' || segundaLetraPlaca == 'E' || segundaLetraPlaca == 'I' ||
             segundaLetraPlaca == 'O' || segundaLetraPlaca == 'U') &&
            somaNumerosPlaca % 2 == 0) {
            printf("%s - %s, %s\n", atual->veiculo.placa, atual->veiculo.modelo, atual->veiculo.cor);
        }
        atual = atual->prox;
    }
}


Node *trocarProprietario(Node *lista, char *chassi, char *novoProprietario) {
    Node *atual = lista;
    while (atual != NULL) {
        if (strchr(atual->veiculo.placa, '0') == NULL) {
            if (strcmp(atual->veiculo.chassi, chassi) == 0) {
                strcpy(atual->veiculo.proprietario, novoProprietario);
                printf("Proprietario trocado com sucesso.\n");
                return lista;
            }
        }
        atual = atual->prox;
    }

    printf("Carro nao encontrado ou placas com digito zero.\n");
    return lista;
}

int main() {
    Node *listaVeiculos = inicializarLista();
    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1. Adicionar Veiculo\n");
        printf("2. Listar Proprietarios Diesel 2010\n");
        printf("3. Listar Placas J\n");
        printf("4. Listar Modelo e Cor Vogal\n");
        printf("5. Trocar Proprietario por Chassi\n");
        printf("0. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                Veiculo novoVeiculo;
                printf("\nDigite os dados do veiculo:\n");
                printf("Proprietario: ");
                scanf(" %[^\n]", novoVeiculo.proprietario);
                printf("Combustivel (alcool, diesel, gasolina): ");
                scanf(" %[^\n]", novoVeiculo.combustivel);
                printf("Modelo: ");
                scanf(" %[^\n]", novoVeiculo.modelo);
                printf("Cor: ");
                scanf(" %[^\n]", novoVeiculo.cor);
                printf("Nº chassi: ");
                scanf(" %[^\n]", novoVeiculo.chassi);
                printf("Ano: ");
                scanf("%d", &novoVeiculo.ano);
                printf("Placa: ");
                scanf(" %[^\n]", novoVeiculo.placa);

                listaVeiculos = adicionarVeiculo(listaVeiculos, novoVeiculo);
                break;
            }
            case 2:
                listarProprietariosDiesel2010(listaVeiculos);
                break;
            case 3:
                listarPlacasJ(listaVeiculos);
                break;
            case 4:
                listarModeloCorVogal(listaVeiculos);
                break;
            case 5: {
                char chassiTrocar[20];
                char novoProprietario[100];

                printf("\nDigite o numero do chassi: ");
                scanf(" %[^\n]", chassiTrocar);
                printf("Digite o novo proprietario: ");
                scanf(" %[^\n]", novoProprietario);

                listaVeiculos = trocarProprietario(listaVeiculos, chassiTrocar, novoProprietario);
                break;
            }
            case 0:
                printf("Saindo do programa. Ate mais!\n");
                break;
            default:
                printf("Opção invalida. Tente novamente.\n");
        }

    } while (opcao != 0);

    return 0;
}
